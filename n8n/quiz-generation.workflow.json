{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "quiz-generation",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -512,
        -144
      ],
      "id": "1beb7d75-4840-411b-943b-5854e4cc2fe3",
      "name": "Webhook1",
      "webhookId": "2c4a4d86-e4f8-411f-9539-0bdfe1ef1844"
    },
    {
      "parameters": {
        "jsCode": "const azienda = $json.body.azienda;\nconst job = $json.body.job_description;\nconst tipiQuiz = $json.body.tipi_quiz;\nconst numeroDomande = $json.body.numero_di_domande;\n\nconst chatInput = `Sei un esperto nella creazione di quiz per la valutazione di candidati. Il tuo compito è generare domande di qualità per valutare un candidato.\n\n## INFORMAZIONI AZIENDA\nNome: ${azienda.nome}\nSettore: ${azienda.settore}\nDescrizione: ${azienda.descrizione}\n\n## POSIZIONE DA VALUTARE\nRuolo: ${job.ruolo}\nLivello: ${job.livello}\nResponsabilità principali:\n${job.responsabilità.map((r, i) => `${i + 1}. ${r}`).join('\\n')}\n\nCompetenze richieste:\n${job.competenze_richieste.map((c, i) => `${i + 1}. ${c}`).join('\\n')}\n\n## ISTRUZIONI PER LA GENERAZIONE\nDevi creare ${numeroDomande} domande per OGNUNA delle seguenti tipologie di quiz: ${tipiQuiz.map(t => `\"${t}\"`).join(', ')}.\n\nPer ogni domanda DEVI includere:\n- \"testo\": la domanda da porre al candidato (chiara e specifica)\n- \"opzioni\": array di esattamente 4 possibili risposte\n- \"risposta_corretta\": indice dell'opzione corretta (0, 1, 2 o 3)\n- \"difficolta\": numero da 1 (facile) a 10 (molto difficile)\n- \"punteggio\": punti assegnati per risposta corretta (proporzionale alla difficoltà)\n- \"tipo_quiz\": la tipologia a cui appartiene questa domanda\n\nREQUISITI IMPORTANTI:\n- Le domande devono essere pertinenti al ruolo di ${job.ruolo} in ambito ${azienda.settore}\n- Ogni opzione di risposta deve essere plausibile\n- Solo UNA risposta deve essere corretta\n- Varia la difficoltà delle domande (usa livelli da 1 a 10)\n- Le domande DEVONO essere diverse\n\n## FORMATO OUTPUT\nRestituisci SOLO un oggetto JSON valido, senza testo aggiuntivo prima o dopo. Il formato DEVE essere esattamente:\n\n{\n  \"azienda_nome\": \"${azienda.nome}\",\n  \"ruolo\": \"${job.ruolo}\",\n  \"livello\": \"${job.livello}\",\n  \"tipi_quiz\": ${JSON.stringify(tipiQuiz)},\n  \"totale_domande\": ${numeroDomande * tipiQuiz.length},\n  \"domande\": [\n    {\n      \"testo\": \"Testo della domanda qui\",\n      \"opzioni\": [\"Opzione A\", \"Opzione B\", \"Opzione C\", \"Opzione D\"],\n      \"risposta_corretta\": 0,\n      \"difficolta\": 5,\n      \"punteggio\": 10,\n      \"tipo_quiz\": \"creatività\"\n    }\n  ]\n}\n\nGenera ora il JSON completo con tutte le ${numeroDomande * tipiQuiz.length} domande (${numeroDomande} per ogni tipo di quiz).`;\n\nreturn [{ json: { chatInput } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        -352
      ],
      "id": "6dc33c96-e2a6-4895-839c-fb4f094c8b12",
      "name": "Prompt Building"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "quizzes",
        "fields": "={{ Object.keys($json).join(',') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        1504,
        -160
      ],
      "id": "9f993c15-532c-499a-8350-7adf39cae4dc",
      "name": "Save quiz to db",
      "credentials": {
        "mongoDb": {
          "id": "wxTT5ALvByn25y7M",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.response || ''\ntry {\n  const parsed = JSON.parse(text);\n  const request_status = parsed.error ? 'error' : 'success';\n  return [{ json: {...parsed, request_status: request_status } }];\n} catch (e) {\n  return [{ json: { error: \"Invalid JSON from LLM\", raw: text, request_status: 'error' }}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        -352
      ],
      "id": "35994276-8d4a-4b18-88c9-23425667ac9a",
      "name": "Quiz Parsing"
    },
    {
      "parameters": {
        "jsCode": "const insertedDoc = items[0].json;\nconst quizId = insertedDoc._id || insertedDoc.insertedId;\n\nreturn [{\n  json: {\n    success: true,\n    message: \"quiz added\",\n    quiz_id: quizId,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1712,
        -160
      ],
      "id": "e2dfcf57-bcfd-4554-84fc-9643b6336c95",
      "name": "Prepare Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 201
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1920,
        -160
      ],
      "id": "14ac41fa-d6ce-4164-8522-b30e260a91d5",
      "name": "Response success"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "job-description",
        "fields": "={{ Object.keys($json).join(',') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        448,
        16
      ],
      "id": "45bc82d8-894a-439b-a487-c46e8d1a77b7",
      "name": "Insert Job Description",
      "credentials": {
        "mongoDb": {
          "id": "wxTT5ALvByn25y7M",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.body.job_description"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        16
      ],
      "id": "a8c10ddb-6b2d-401c-89c3-c5a90b064b2a",
      "name": "Get Job description Data"
    },
    {
      "parameters": {
        "jsCode": "let data = $input.first().json\ndelete data.request_status\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1248,
        -160
      ],
      "id": "2698519a-6375-4046-bca4-cae70d6067f8",
      "name": "Prepare Data to Insert"
    },
    {
      "parameters": {
        "mode": "combineBySql",
        "numberInputs": 3,
        "query": "SELECT quiz.*, job_desc._id as job_description_id, company_id.id as company_id\nFROM \n  input1 as quiz, \n  input2 as company_id,\n  input3 as job_desc",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1024,
        -160
      ],
      "id": "2116158a-adc1-406c-84bf-f0d97a58b5e2",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "67503c9c-9864-40f9-8603-9772bd3278dd",
              "leftValue": "={{ $json.request_status }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        624,
        -352
      ],
      "id": "79cb99bc-c842-4713-95e0-9d0bc48ef033",
      "name": "If"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"message\": \"error occurred\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1024,
        -448
      ],
      "id": "981adf92-ca38-4b11-95be-993b4b49803d",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "qwen3:8b"
            },
            {
              "name": "prompt",
              "value": "={{ $json.chatInput }}"
            },
            {
              "name": "stream",
              "value": false
            },
            {
              "name": "format",
              "value": "json"
            },
            {
              "name": "options",
              "value": "={{ {\"temperature\": 0.1, \"num_predict\": 16384, \"num_ctx\": 8192} }}"
            }
          ]
        },
        "options": {}
      },
      "id": "935ab8c6-8427-46f9-923c-1c7859dc0cf4",
      "name": "Ollama LLM Call1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        160,
        -352
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "F6rPQJKQix9aQq83",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return { id: $input.first().json.body.azienda.id };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -144
      ],
      "id": "d378967a-73df-49a4-9659-38e79655b294",
      "name": "Get Company Id"
    }
  ],
  "connections": {
    "Webhook1": {
      "main": [
        [
          {
            "node": "Prompt Building",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Job description Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Company Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompt Building": {
      "main": [
        [
          {
            "node": "Ollama LLM Call1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save quiz to db": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quiz Parsing": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Response success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Job Description": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Get Job description Data": {
      "main": [
        [
          {
            "node": "Insert Job Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Data to Insert": {
      "main": [
        [
          {
            "node": "Save quiz to db",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Prepare Data to Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama LLM Call1": {
      "main": [
        [
          {
            "node": "Quiz Parsing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Company Id": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "0f41c741239e7d8454e734c25d98231620c3dc2b62c93f64cb7348d589308a36"
  }
}